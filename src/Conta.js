// Declara√ß√£o da classe Conta
class Conta {

    constructor(titular, cpf, numConta) {
        this.agencia = '0001';
        this.banco = '2024';
        this.numConta = numConta;
        this.tipo = 'comum';
        this.saldo = 0;
        this.extrato = [];
        this.titular = titular;
        this.cpf = cpf;
        this.totalSaquesRealizados = 0;
    };

    verSaldo() {
        console.log(`üí∞ Seu saldo atual √© de R$ ${this.saldo.toFixed(2)}.`);
    };

    verExtrato() {
        this.extrato.length !== 0 ? console.log(this.extrato) : console.log('N√£o h√° transa√ß√µes banc√°rias em seu hist√≥rico.');
    };

    depositar(valor) {
        if (valor > 0) {
            this.saldo += valor; // Incrementa valor no saldo
            console.log(`‚úÖ Dep√≥sito de R$ ${valor.toFixed(2)} realizado com sucesso!`);

            // Adiciona operacao realizada ao extrato
            this.extrato.push(
                {
                    nomeTransacao: 'Dep√≥sito',
                    valor: valor,
                    data: new Date()
                });

        } else console.log('‚ÑπÔ∏è Informe um valor positivo diferente de 0.');

    };

    sacar(valor) {
        // Verifica se o valor √© positivo e maior do que 0
        if(valor > 0) {
            // Verifica se h√° saldo dispon√≠vel
            if (this.saldo >= valor) {
                this.saldo -= valor; // Decrementa valor do saldo
                console.log(`‚úÖ Saque de R$ ${valor.toFixed(2)} realizado com sucesso!`);
    
                // Adiciona operacao realizada ao extrato
                this.extrato.push(
                    {
                        nomeTransacao: 'Saque',
                        valor: valor,
                        taxa: 0,
                        data: new Date()
                    });
    
                this.totalSaquesRealizados++; // Incrementa 1 a cada saque realizado com sucesso
            } else console.log('‚ùå Saldo insuficiente para saque.');

        } else console.log('‚ö†Ô∏è Informe um valor maior do que 0.');

    };


    transferir(ContaDestino, valor) {
        // Verifica se as contas s√£o diferentes
        if (this.numConta != ContaDestino.numConta) {

            // Verifica se h√° saldo dispon√≠vel
            if (this.saldo >= valor) {

                this.saldo -= valor; // Decrementa valor da conta de origem
                ContaDestino.saldo += valor; // Transfere valor para o destinat√°rio

                console.log(`üí∏ Valor de R$ ${valor.toFixed(2)} transferido com sucesso para ${ContaDestino.titular}.`);

                // Objeto com as informa√ß√µes da transfer√™ncia
                const infoTransacao = {
                    nomeTransacao: 'Transfer√™ncia',
                    de: { nomeTransferente: this.titular, numeroConta: this.numConta },
                    para: { nomeRecebedor: ContaDestino.titular, numeroConta: ContaDestino.numConta },
                    valor: valor,
                    taxa: 0,
                    data: new Date()
                };

                this.extrato.push(infoTransacao); // Adiciona opera√ß√£o realizada ao extrato do Transferente
                ContaDestino.extrato.push(infoTransacao); // Adiciona opera√ß√£o realizada ao extrato do Recebedor

            } else console.log('Saldo insuficiente!');

        } else console.log('Opera√ß√£o inv√°lida! S√≥ √© poss√≠vel realizar transfer√™ncias para outras contas.');
    };

};

module.exports = Conta; // Exporta√ß√£o da Classe Conta
